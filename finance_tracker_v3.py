# -*- coding: utf-8 -*-
"""FINANCE TRACKER V3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yc6S2s580EeLr1FWk-7KD0TtFtEUD_gq
"""

import json
import datetime
import csv
import os
from dotenv import load_dotenv
from plaid import Configuration, ApiClient
from plaid.api import plaid_api
from plaid.model.transactions_get_request import TransactionsGetRequest

# Load environment variables
load_dotenv()

# Plaid credentials from environment
PLAID_CLIENT_ID = os.getenv("PLAID_CLIENT_ID")
PLAID_SECRET = os.getenv("PLAID_SECRET")

# Configure Plaid client
plaid_host = os.getenv("PLAID_HOST", "https://sandbox.plaid.com")
config = Configuration(
    host=plaid_host,
    api_key={"clientId": PLAID_CLIENT_ID, "secret": PLAID_SECRET}
)
client = plaid_api.PlaidApi(ApiClient(config))

def load_access_token():
    """Load access token from file"""
    try:
        with open('access_token.json', 'r') as f:
            data = json.load(f)
            return data['access_token']
    except FileNotFoundError:
        print("access_token.json not found. Run connect_api_bank.py first to get an access token.")
        return None
    except Exception as e:
        print(f"Error loading access token: {e}")
        return None

def categorize(txn):
    """Categorize transaction based on business logic"""
    name = txn.name.lower() if txn.name else ""

    # Subcontractor database
    SUBCONTRACTOR_DATABASE = {
        "all-pro plumbing":   {"service": "Plumbing"},
        "j&l electric":       {"service": "Electrical"},
        "sal's drywall":      {"service": "Drywall & Paint"},
        "creative landscape": {"service": "Landscaping"},
        "best quality roofing": {"service": "Roofing"},
        "a-1 painting":       {"service": "Drywall & Paint"},
        "precision framing":  {"service": "Framing"},
        "elite concrete":     {"service": "Concrete & Foundation"},
        "custom cabinetry":  {"service": "Cabinets & Millwork"},
        "total home insulation": {"service": "Insulation"},
        "flores tile & stone": {"service": "Flooring & Tile"},
        "window world":       {"service": "Windows & Doors"}
    }

    # Rule 1: Handle payment methods
    if "quickbooks" in name or "intuit" in name:
        return {"category": "QuickBooks Bill Pay", "project": "NEEDS REVIEW"}
    if "zelle" in name:
        return {"category": "Zelle Payment", "project": "Bellevue"}
    if "check #" in name:
        return {"category": "Subcontractor Payout", "project": "Bellevue"}

    # Rule 2: Check subcontractor database
    for sub_keyword, sub_details in SUBCONTRACTOR_DATABASE.items():
        if sub_keyword in name:
            return {"category": sub_details["service"], "project": "Bellevue"}

    # Rule 3: Handle vendors
    if any(vendor in name for vendor in ["home depot", "lowe's", "sherwin-williams"]):
        return {"category": "Materials", "project": "Bellevue"}
    if any(vendor in name for vendor in ["sunbelt", "united rentals"]):
        return {"category": "Equipment Rental", "project": "Bellevue"}
    if any(vendor in name for vendor in ["chevron", "shell", "76"]):
        return {"category": "Fuel", "project": "Admin"}

    # Rule 4: Default
    return {"category": "Uncategorized", "project": "Unknown"}

def load_existing_transactions():
    """Load existing transactions from CSV file"""
    existing_ids = set()
    try:
        with open('transactions.csv', 'r', newline='') as f:
            reader = csv.reader(f)
            next(reader)  # Skip header
            for row in reader:
                if row:
                    existing_ids.add(row[0])  # transaction_id is first column
    except FileNotFoundError:
        pass  # File doesn't exist yet, that's ok
    return existing_ids

def save_transactions(transactions_data):
    """Save transactions to CSV file"""
    with open('transactions.csv', 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['transaction_id', 'date', 'name', 'amount', 'category', 'project'])
        writer.writerows(transactions_data)

def main():
    print("=== Finance Tracker ===")
    
    # Load access token
    access_token = load_access_token()
    if not access_token:
        return
    
    print("✅ Access token loaded successfully")
    
    # Load existing transactions
    existing_ids = load_existing_transactions()
    print(f"Found {len(existing_ids)} existing transactions")
    
    # Fetch recent transactions from Plaid
    print("Fetching recent transactions from Plaid...")
    start_date = (datetime.datetime.now() - datetime.timedelta(days=60)).date()
    end_date = datetime.datetime.now().date()
    
    try:
        txn_req = TransactionsGetRequest(access_token=access_token, start_date=start_date, end_date=end_date)
        txn_resp = client.transactions_get(txn_req)
        transactions = txn_resp.transactions
        print(f"Fetched {len(transactions)} total transactions")
    except Exception as e:
        print(f"Error fetching transactions: {e}")
        return
    
    # Process and categorize transactions
    all_transactions = []
    new_transactions = []
    
    for t in transactions:
        tags = categorize(t)
        row = [t.transaction_id, t.date.isoformat(), t.name, t.amount, tags["category"], tags["project"]]
        all_transactions.append(row)
        
        if t.transaction_id not in existing_ids:
            new_transactions.append(row)
    
    # Save all transactions to CSV
    save_transactions(all_transactions)
    
    if new_transactions:
        print(f"✅ Added {len(new_transactions)} new transactions to transactions.csv")
        print("New transactions:")
        for t in new_transactions[:5]:  # Show first 5
            print(f"  {t[2]} - ${t[3]} ({t[4]})")
        if len(new_transactions) > 5:
            print(f"  ... and {len(new_transactions) - 5} more")
    else:
        print("✅ No new transactions found")
    
    print(f"\nTotal transactions in file: {len(all_transactions)}")

if __name__ == "__main__":
    main()