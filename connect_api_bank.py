# -*- coding: utf-8 -*-
"""Connect API/Bank.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19q0CaLZjPDdHRAjBqtkHpKod_xNZYoO9
"""

import os
import datetime
import json
from dotenv import load_dotenv
from plaid import Configuration, ApiClient
from plaid.api import plaid_api
from plaid.model.link_token_create_request_user import LinkTokenCreateRequestUser
from plaid.model.link_token_create_request import LinkTokenCreateRequest
from plaid.model.products import Products
from plaid.model.country_code import CountryCode
from plaid.model.item_public_token_exchange_request import ItemPublicTokenExchangeRequest
from plaid.model.accounts_get_request import AccountsGetRequest

# Load environment variables
load_dotenv()

# Plaid credentials from environment
PLAID_CLIENT_ID = os.getenv("PLAID_CLIENT_ID")
PLAID_SECRET = os.getenv("PLAID_SECRET")
PLAID_ENV = os.getenv("PLAID_ENV", "sandbox")

# Configure Plaid client
plaid_host = "https://sandbox.plaid.com"
config = Configuration(
    host=plaid_host,
    api_key={"clientId": PLAID_CLIENT_ID, "secret": PLAID_SECRET}
)
client = plaid_api.PlaidApi(ApiClient(config))

def create_link_token():
    """Create a link token for connecting to bank"""
    try:
        user = LinkTokenCreateRequestUser(client_user_id="user-" + datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
        req = LinkTokenCreateRequest(
            user=user,
            client_name="Finance Tracker",
            products=[Products("transactions")],
            country_codes=[CountryCode("US")],
            language="en"
        )
        resp = client.link_token_create(req)
        return resp.link_token
    except Exception as e:
        print(f"Error creating link token: {e}")
        return None

def exchange_public_token(public_token):
    """Exchange public token for access token"""
    try:
        ex = client.item_public_token_exchange(ItemPublicTokenExchangeRequest(public_token=public_token))
        return ex.access_token
    except Exception as e:
        print(f"Error exchanging token: {e}")
        return None

def save_access_token(access_token):
    """Save access token to file"""
    with open('access_token.json', 'w') as f:
        json.dump({'access_token': access_token, 'created_at': datetime.datetime.now().isoformat()}, f)
    print(f"Access token saved to access_token.json")

def main():
    print("=== Plaid Bank Connection ===")
    print("1. Creating link token...")
    link_token = create_link_token()
    
    if not link_token:
        print("Failed to create link token")
        return
    
    print(f"Link token created: {link_token[:20]}...")
    print("\n2. You need to use this link token with Plaid Link to connect your bank.")
    print("3. After connecting, you'll get a public token to exchange for access token.")
    
    # For demo purposes, using sandbox test credentials
    print("\n=== Using Sandbox Test Credentials ===")
    print("For testing, you can use these sandbox credentials:")
    print("Username: user_good")
    print("Password: pass_good")
    
    # Create a simple HTML file for testing
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Plaid Link Test</title>
    <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
</head>
<body>
    <h2>Connect Your Bank</h2>
    <button id="link-button">Connect Bank</button>
    <div id="result"></div>
    
    <script>
        document.getElementById('link-button').onclick = function() {{
            const handler = Plaid.create({{
                token: '{link_token}',
                onSuccess: async function(public_token, metadata) {{
                    console.log('Success!', public_token);
                    document.getElementById('result').innerHTML = 
                        '<p>Success! Public token: ' + public_token + '</p>' +
                        '<p>Copy this token and use it in the exchange_public_token function</p>';
                }},
                onExit: function(err, metadata) {{
                    console.log('Exit', err, metadata);
                }}
            }});
            handler.open();
        }};
    </script>
</body>
</html>
"""
    
    with open('plaid_link.html', 'w') as f:
        f.write(html_content)
    
    print("\n4. Open plaid_link.html in your browser to test the connection")
    print("5. After getting the public token, run the exchange function")

if __name__ == "__main__":
    main()